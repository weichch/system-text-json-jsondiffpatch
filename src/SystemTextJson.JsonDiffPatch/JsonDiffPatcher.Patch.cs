using System.Text.Json.Diffs;
using System.Text.Json.Nodes;

namespace System.Text.Json
{
    static partial class JsonDiffPatcher
    {
        private const string InvalidPatchDocument = "Invalid patch document.";

        /// <summary>
        /// Applies changes in the patch document to the JSON object.
        /// </summary>
        /// <param name="left">The JSON object to which patch is applied.</param>
        /// <param name="patch">The patch document previously generated by <c>Diff</c> method.</param>
        public static void Patch(ref JsonNode? left, JsonNode? patch)
        {
            // When make changes in this method, also copy the changes to ReversePatch method

            if (patch is null)
            {
                return;
            }

            var delta = new JsonDiffDelta(patch);
            var kind = delta.Kind;

            if (kind == DeltaKind.Modified)
            {
                left = delta.GetNewValue();
                return;
            }

            if (kind == DeltaKind.Object && left is JsonObject jsonObj)
            {
                PatchObject(jsonObj, patch.AsObject());
                return;
            }

            if (kind == DeltaKind.Array && left is JsonArray jsonArray)
            {
                PatchArray(jsonArray, patch.AsObject());
                return;
            }

            throw new FormatException(InvalidPatchDocument);
        }

        /// <summary>
        /// Reverses the changes made by a previous call to <see cref="Patch"/>.
        /// </summary>
        /// <param name="right">The JSON object from which patch is reversed.</param>
        /// <param name="patch">The patch document previously generated by <c>Diff</c> method.</param>
        public static void ReversePatch(ref JsonNode? right, JsonNode? patch)
        {
            // When make changes in this method, also copy the changes to Patch method

            if (patch is null)
            {
                return;
            }

            var delta = new JsonDiffDelta(patch);
            var kind = delta.Kind;

            if (kind == DeltaKind.Modified)
            {
                right = delta.GetOldValue();
                return;
            }

            if (kind == DeltaKind.Object && right is JsonObject jsonObj)
            {
                ReversePatchObject(jsonObj, patch.AsObject());
                return;
            }

            if (kind == DeltaKind.Array && right is JsonArray jsonArray)
            {
                ReversePatchArray(jsonArray, patch.AsObject());
                return;
            }

            throw new FormatException(InvalidPatchDocument);
        }
    }
}
